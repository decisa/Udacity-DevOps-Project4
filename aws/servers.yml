Description: >
    Artem Telesh / Cloud DevOps Engineer Nanodegree
    Project 4: Servers
Parameters:
    # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName:
        Description: Name of environment to prefix to resource names
        Type: String
    
    HostInstanceType:
        Description: Instance type for Host EC2
        Type: String
        Default: t2.micro

    HostKeyName:
        Description: Key name to login into host EC2
        Type: String

    ConfigStorageName:
        Description: Name of S3 bucket, where KOPS cluster config will be stored
        Type: String
        Default: devops.k8s.telesh.us
        
Resources:
    HostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP and SSH traffic to Servers
            SecurityGroupIngress:
              - IpProtocol: tcp  # allow inbound HTTP traffic
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp  # allow inbound SSH traffic
                FromPort: 22
                ToPort: 22
                CidrIp: 173.49.58.93/32 # shoudl I limit to only my IP?
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VpcId
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Host instance Security Group

    K8sAccessRole:
        Type: AWS::IAM::Role
        Properties: 
            Description: Role to allow read access to S3 buckets
            RoleName: EC2-K8s-Role-Route53-EC2-IAM-S3
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                            - ec2.amazonaws.com
                    Action:
                        - 'sts:AssumeRole'
            Path: /
            Policies:
              - PolicyName: AmazonS3FullAccess
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                            - s3:*
                        Resource: '*'
              - PolicyName: AmazonR53FullAccess
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - route53:*
                          - route53domains:*
                          - cloudfront:ListDistributions
                          - elasticloadbalancing:DescribeLoadBalancers
                          - elasticbeanstalk:DescribeEnvironments
                          - s3:ListBucket
                          - s3:GetBucketLocation
                          - s3:GetBucketWebsite
                          - ec2:DescribeVpcs
                          - ec2:DescribeVpcEndpoints
                          - ec2:DescribeRegions
                          - sns:ListTopics
                          - sns:ListSubscriptionsByTopic
                          - cloudwatch:DescribeAlarms
                          - cloudwatch:GetMetricStatistics
                        Resource: '*'
                      - Effect: Allow
                        Action: apigateway:GET
                        Resource: arn:aws:apigateway:*::/domainnames
              - PolicyName: AmazonEC2FullAccess
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Action: 
                          - ec2:*
                          - elasticloadbalancing:*
                          - cloudwatch:*
                          - autoscaling:*
                        Effect: Allow
                        Resource: '*'
                      - Action: iam:CreateServiceLinkedRole
                        Effect: Allow
                        Resource: '*'
                        Condition:
                            StringEquals:
                                'iam:AWSServiceName':
                                  - autoscaling.amazonaws.com
                                  - ec2scheduled.amazonaws.com
                                  - elasticloadbalancing.amazonaws.com
                                  - spot.amazonaws.com
                                  - spotfleet.amazonaws.com
                                  - transitgateway.amazonaws.com
              - PolicyName: AmazonIAMFullAccess
                PolicyDocument: 
                    Version: 2012-10-17
                    Statement:
                      - Action: 
                          - iam:*
                          - organizations:DescribeAccount
                          - organizations:DescribeOrganization
                          - organizations:DescribeOrganizationalUnit
                          - organizations:DescribePolicy
                          - organizations:ListChildren
                          - organizations:ListParents
                          - organizations:ListPoliciesForTarget
                          - organizations:ListRoots
                          - organizations:ListPolicies
                          - organizations:ListTargetsForPolicy
                        Effect: Allow
                        Resource: '*'
            Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}-EC2-K8s-Role-Route53-EC2-IAM-S3 Role
    
    K8sProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            InstanceProfileName: !Sub ${EnvironmentName}-Kubernetes-Profile
            Roles: 
                - !Ref K8sAccessRole

    ConfigStorage:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete
        Properties:
            BucketName: !Ref ConfigStorageName


    HostEC2:
        Type: AWS::EC2::Instance
        Properties: 
            # AvailabilityZone: us-west-2
            # BlockDeviceMappings: 
                # - BlockDeviceMapping
            # CpuOptions: 
            #     CpuOptions
            IamInstanceProfile: !Ref K8sProfile
            ImageId: ami-0a634ae95e11c6f91
            InstanceType: !Ref HostInstanceType
            KeyName: !Ref HostKeyName
            # NetworkInterfaces: 
                # - NetworkInterface
            SecurityGroupIds: 
                - !Ref HostSecurityGroup
            # SecurityGroups: 
            #     - !Ref HostSecurityGroup
            SubnetId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-PubSNet1
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Host EC2 Instance
            UserData:
                Fn::Base64: !Sub 
                  - |
                    #!/bin/bash
                    apt-get update -y

                    open_port=80
                        
                    echo "Hi from Cloud formation" > ~/artem_telesh.txt

                    # install awscli
                    curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
                    apt install unzip python make -y
                    unzip awscli-bundle.zip
                    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws

                    # install kubectl
                    echo "installing kubectl"
                    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl  https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                    chmod +x ./kubectl
                    mv ./kubectl /usr/local/bin/kubectl

                    echo "done installing kubectl"

                    # install KOPS 
                    curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
                    chmod +x kops-linux-amd64
                    mv kops-linux-amd64 /usr/local/bin/kops


                    # generate ssh key 
                    ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa <<< y

                    # set location of config files
                    mkdir -p ~/.kops
                    mkdir -p /home/ubuntu/.kops
                    echo "kops_state_store: s3://${ConfigStorageName}" >> ~/.kops/config
                    echo "kops_state_store: s3://${ConfigStorageName}" >> /home/ubuntu/.kops/config

                    # add Makefile to easily get ELB DNSname and to destroy cluster 
                    echo "dnsname:"  > /home/ubuntu/Makefile
                    printf "\t@echo \"Loadbalancer URL:  http://\$(shell aws elb describe-load-balancers --region us-west-2 --query LoadBalancerDescriptions[*].DNSName | tr -d '[\"\"]\\" >> /home/ubuntu/Makefile
                    printf "n '):$open_port\"\n\n" >> /home/ubuntu/Makefile

                    echo "# Delete k8s cluster:" >> /home/ubuntu/Makefile
                    echo "destroy: check_destroy"  >> /home/ubuntu/Makefile
                    printf "\tkops delete cluster --name ${ConfigStorageName} --yes\n\n" >> /home/ubuntu/Makefile

                    printf "check_destroy:\n\t@echo -n \"Are you sure you want to delete the cluster? [y/n] \" && read ans && [ \$\${!ans:-N} = y ]\n\n.PHONY: destroy check_destroy\n\n" >> /home/ubuntu/Makefile

                    

                    export KOPS_STATE_STORE=s3://${ConfigStorageName}

                    REGIONS=${AZs} 
                    VPC=${VPC}
                    SUBNETS=${SNets} 

                    echo "searching for cluster..."
                    if kops get clusters | grep ${ConfigStorageName}
                    then
                        echo "Cluster already exists in S3." 
                        # echo "Cluster already exists in S3. Deleting first"
                        # kops delete cluster --name ${ConfigStorageName} --yes
                    else
                        echo "This is a clean installation. Starting from scratch"
                        kops create cluster --cloud=aws --zones=$REGIONS --name=${ConfigStorageName} \
                            --state=s3://${ConfigStorageName} \
                            --dns-zone=telesh.us --dns=private \
                            --master-size=t2.micro --node-size=t2.micro --node-count=1 \
                            --vpc=$VPC --subnets=$SUBNETS 
                    fi
                    
                    
                    echo "************************************************************"
                    if kops get secrets --name devops.k8s.telesh.us | grep SSHPublicKey
                    then 
                        echo "SSHPublicKey secret already exists!"
                    else
                        echo "SSHPublicKey secret does not exist!"
                        echo "adding new one"
                        kops create secret --name=${ConfigStorageName} sshpublickey admin -i ~/.ssh/id_rsa.pub
                    fi
                    echo "************************************************************"
                        
                    kops update cluster --name=${ConfigStorageName}
                    kops update cluster --name=${ConfigStorageName} --yes

                    echo "--------------------------------------------------------------------------------"
                    echo "get clusters after update: "
                    kops get clusters
                    echo "--------------------------------------------------------------------------------"

                    echo "kops update cluster --name=${ConfigStorageName} --yes" >> ~/artem_telesh.txt

                    kops validate cluster --name ${ConfigStorageName} --wait 15m

                    local_name=flask-prediction
                    docker_user=decisa
                    dockerpath=$docker_user/$local_name

                    kubectl create deployment $local_name --image=$dockerpath:latest

                    kubectl expose deployment $local_name --type=LoadBalancer --port=$open_port --target-port=80
                    kubectl get services


                  - AZs:
                        Fn::ImportValue:
                            !Sub ${EnvironmentName}-AZs
                    VPC:
                        Fn::ImportValue:
                            !Sub ${EnvironmentName}-VpcId
                    SNets:
                        Fn::ImportValue:
                            !Sub ${EnvironmentName}-PubSNets

